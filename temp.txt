token_patterns = [
    (r'main', 'code_1', '预定义标识符'),
    (r'int', 'code_2', '关键字'),
    (r'char', 'code_3', '关键字'),
    (r'if', 'code_4', '关键字'),
    (r'else', 'code_5', '关键字'),
    (r'for', 'code_6', '关键字'),
    (r'while', 'code_7', '关键字'),
    (r'[a-zA-Z_][a-zA-Z0-9_]*', 'code_10', '标识符'),  # 匹配字母开头的标识符
    (r'\d+(\.\d+)?', 'code_20', '数字字面量'),
    (r'==', 'code_39', '等于比较符'),
    (r'=', 'code_21', '赋值运算符'),
    (r'\+', 'code_22', '加法运算符'),
    (r'-', 'code_23', '减法运算符'),
    (r'\*', 'code_24', '乘法运算符'),
    (r'/', 'code_25', '除法运算符'),
    (r'\(', 'code_26', '左括号'),
    (r'\)', 'code_27', '右括号'),
    (r'\[', 'code_28', '左方括号'),
    (r'\]', 'code_29', '右方括号'),
    (r'\{', 'code_30', '左大括号'),
    (r'\}', 'code_31', '右大括号'),
    (r'\.', 'code_32', '点运算符'),
    (r':', 'code_33', '冒号'),
    (r';', 'code_34', '分号'),
    (r'>', 'code_35', '大于比较符'),
    (r'<', 'code_36', '小于比较符'),
    (r'>=', 'code_37', '大于等于比较符'),
    (r'<=', 'code_38', '小于等于比较符'),
    (r'!=', 'code_40', '不等于比较符'),
    (r'\\0', 'code_1000', '空字符'),
    (r'ERROR', 'code_m1', '错误')  # 通配符匹配其他所有字符
]
import re

import pandas as pd

# 单词符号及其种别码和类型描述

# 编译正则表达式
token_re = '|'.join(f'(?P<{name}>{pattern})' for pattern, name, _ in token_patterns)


def lexer(prog):
    match_iter = re.finditer(token_re, prog)
    tokens = []

    for match in match_iter:
        token = match.group(match.lastgroup)  # 获取匹配的token
        code = match.lastgroup
        code = code[5:] if code[5] != 'm' else '-1'  # 处理种别码
        type_description = next((p[2] for p in token_patterns if p[1] == match.lastgroup), (None, '未知'))

        tokens.append((token, code, type_description))

    return tokens


def parser(tokens):
    def program():
        if tokens[0][0] == 'main' and tokens[0][1] == '1':
            tokens.pop(0)
            if tokens[0][0] == '(' and tokens[0][1] == '26':
                tokens.pop(0)
                if tokens[0][0] == ')' and tokens[0][1] == '27':
                    tokens.pop(0)
                    return statement_block()
        raise SyntaxError("Invalid program")

    def statement_block():
        if tokens[0][0] == '{' and tokens[0][1] == '30':
            tokens.pop(0)
            while tokens and tokens[0][0] != '}':
                if tokens[0][0]==';' and tokens[0][1] == '34':
                    tokens.pop(0)
                    continue
                statement()
            if tokens[0][0] == '}' and tokens[0][1] == '31':
                tokens.pop(0)
                return True
        raise SyntaxError("Invalid statement block")

    def statement():
        if tokens[0][0] == 'if' and tokens[0][1] == '4':
            return if_statement()
        elif tokens[0][0] == 'while' and tokens[0][1] == '7':
            return while_statement()
        elif tokens[0][2] == '标识符' and tokens[0][1] == '10':
            return assignment_statement()
        else:
            raise SyntaxError("Invalid statement")

    def if_statement():
        if tokens[0][0] == '(' and tokens[0][1] == '26':
            tokens.pop(0)
            condition()
            if tokens[0][0] == ')' and tokens[0][1] == '27':
                tokens.pop(0)
                return statement_block()
        raise SyntaxError("Invalid if statement")

    def while_statement():
        if tokens[0][0] == '(' and tokens[0][1] == '26':
            tokens.pop(0)
            condition()
            if tokens[0][0] == ')' and tokens[0][1] == '27':
                tokens.pop(0)
                return statement_block()
        raise SyntaxError("Invalid while statement")

    def assignment_statement():
        if tokens[0][0] == '=' and tokens[0][1] == '21':
            tokens.pop(0)
            expression()
            return True
        raise SyntaxError("Invalid assignment statement")

    def condition():
        expression()
        if tokens[0][0] in ['<', '>', '<=', '>=', '==', '!='] and tokens[0][1] in ['35', '36', '37', '38', '39', '40']:
            tokens.pop(0)
            expression()
            return True
        raise SyntaxError("Invalid condition")

    def expression():
        term()
        while tokens and tokens[0][0] in ['+', '-', '*', '/'] and tokens[0][1] in ['22', '23', '24', '25']:
            tokens.pop(0)
            term()
        return True

    def term():
        factor()
        while tokens and tokens[0][0] in ['*', '/'] and tokens[0][1] in ['24', '25']:
            tokens.pop(0)
            factor()
        return True

    def factor():
        if tokens[0][2] == '标识符' and tokens[0][1] == '10':
            tokens.pop(0)
            return True
        elif tokens[0][2] == '数字字面量' and tokens[0][1] == '20':
            tokens.pop(0)
            return True
        elif tokens[0][0] == '(' and tokens[0][1] == '26':
            tokens.pop(0)
            expression()
            if tokens[0][0] == ')' and tokens[0][1] == '27':
                tokens.pop(0)
                return True
        raise SyntaxError("Invalid factor")

    try:
        program()
        if tokens:
            raise SyntaxError("Unexpected tokens remaining")
        return True
    except SyntaxError as e:
        print(f"\n解析过程中发生错误: {e}")
        return False


def main():
    with open('input.txt', 'r') as file:
        prog = file.read()

    tokens = lexer(prog)
    # 创建DataFrame
    df = pd.DataFrame(tokens, columns=['单词符号', '种别码', '类型描述'])

    # 处理==在excel中的冲突
    df['单词符号'] = df['单词符号'].apply(lambda x: " " + x if x == '==' else x)

    # 打印结果
    print("\n词法分析结果:")
    print(df.to_string(index=False))

    # 将结果写入Excel
    df.to_excel('词法分析结果.xlsx', index=False, engine='openpyxl')
    print("\n结果已保存到 '词法分析结果.xlsx' 文件中。")

    quads = parser(tokens)
    print("\n三地址代码:")
    for quad in quads:
        print(quad)


if __name__ == "__main__":
    main()
